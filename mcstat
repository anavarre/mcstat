#!/usr/bin/env php
<?php

/**
 * @file
 * mcstat reports memcache daemon statistics
 *
 * @requires PHP CLI 5.2 or newer.
 *
 * Copyright 2011 Jonathan W. Webb
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

define('DEFAULT_HOSTNAME', 'localhost');
define('DEFAULT_PORT', 11211);
declare(ticks=1);
exit(mcstat_main($argv, $argc));

class mcstat_server
{
  protected $socket_ptr = null;

  function connect($hostname, $port) {
    $this->socket_ptr = fsockopen($hostname, $port, $errno, $errstr, 30);
    if (!$this->socket_ptr) {
      return array('errno' => $errno, 'errstr' => $errstr);
    }
  }

  function disconnect() {
    if ($this->socket_ptr) {
      fwrite($this->socket_ptr, "quit\r\n");
      fclose($this->socket_ptr);
      print 'Connection closed' . PHP_EOL;
    }
  }

  function abort($signal) {
    if ($signal === SIGINT || $signal === SIGTERM) {
      print 'Aborting' . PHP_EOL;
      $this->disconnect();
      exit();
    }
  }

  function get_all_stats() {
    $data = array();
    fwrite($this->socket_ptr, "stats\r\n");
    while ($line = fgets($this->socket_ptr, 128)) {
      if (preg_match('/^END/', $line)) {
        break;
      }
      list($stat,$key,$value) = preg_split('/[\s]+/', $line, 3);
      $data[$key] = $value;
    }
    return $data;
  }
}

function mcstat_main($argv, $argc) {

  $command = basename($argv[0]);
  $hostname = ($argc >= 2) ? ($argv[1]) : DEFAULT_HOSTNAME;
  $port = ($argc >= 3) ? ($argv[2]) : DEFAULT_PORT;

  $srv = new mcstat_server();
  if (!($err = $srv->connect($hostname, $port))) {
    pcntl_signal(SIGTERM, array($srv, 'abort'));
    pcntl_signal(SIGINT, array($srv, 'abort'));
    $data = array();
    printf("time      cnct        gets        hits        miss      hit%%     miss%%\n");
    $start = $srv->get_all_stats();
    $stat_time = strftime("%T", (int) $start['time']);
    $data[$stat_time] = $start;
    printf("%s  %4d  %10d  %10d  %10d  %8.2f  %8.2f\n\n",
      $stat_time,
      $start['curr_connections'],
      $start['cmd_get'],
      $start['get_hits'],
      $start['get_misses'],
      (($start['cmd_get'] > 0) ? ($start['get_hits']/$start['cmd_get']) : 0) * 100.0,
      (($start['cmd_get'] > 0) ? ($start['get_misses']/$start['cmd_get']) : 0) * 100.0
    );
    $last = $start;
    sleep(5);

    while (1) {
      $tmp = $srv->get_all_stats();
      $stat_time = strftime("%T", (int) $tmp['time']);
      $stat_gets = $tmp['cmd_get'] - $last['cmd_get'];
      //$data[$stat_time] = $tmp;
      printf("%s  %4d  %10d  %10d  %10d  %8.2f  %8.2f\n",
        $stat_time,
        $tmp['curr_connections'],
        $stat_gets,
        $tmp['get_hits'] - $last['get_hits'],
        $tmp['get_misses'] - $last['get_misses'],
        (($stat_gets > 0) ? (($tmp['get_hits'] - $last['get_hits'])/$stat_gets) : 0) * 100.0,
        (($stat_gets > 0) ? (($tmp['get_misses'] - $last['get_misses'])/$stat_gets) : 0) * 100.0
      );
      $last = $tmp;
      sleep(5);
    }
  }
  else {
    fprintf(STDERR, "%s: Connection to memcache daemon failed. Error %d: %s\n", $command, $err['errno'], $err['errstr']);
    return $err['errno'];
  }

  $srv->disconnect();
  return 0;
}

